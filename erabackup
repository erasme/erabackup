#!/usr/bin/perl

#######################################
# Package ERASME::Backup::Job;
#######################################

package ERASME::Backup::Job;

use strict;
use threads;

use Thread::Running;

use constant TRUE => 1;
use constant FALSE => 1;

my $Census  = 0;

sub new {
	my $class = shift;
	my $id = shift;

	my $self  = {};

	$self->{ID}          = $id;

	$self->{ENABLED}     = TRUE;
	$self->{PRIORITY}    = 100;
	$self->{HOST}        = undef;
	$self->{REMOTEUSER}  = "root";
	$self->{ROTATION}    = undef;
	$self->{SOURCES}      = [];
	$self->{DESTINATION} = undef;

	$self->{_CENSUS} =  \$Census;

	$self->{_CREATE_TIME} = time;
	$self->{_START_TIME}  = undef;
	$self->{_END_TIME}  = undef;

	$self->{_COMMAND} = undef;
	$self->{_RESULT}  = undef;

	$self->{_THREAD_ID}   = undef;

	bless ($self, $class);

	++${$self->{"_CENSUS"}};

  return $self;
}

sub DESTROY {
	my $self = shift;

	++ ${ $self->{"_CENSUS"} };
}

sub population {
	my $self = shift;

	if (ref $self) {
		return ${ $self->{"_CENSUS"} };
	} else {
		return $Census;
	}
}

sub initialize {
	my ($self, $data) = @_;

	$self->enabled($data->{"enabled"}) if defined $data->{"enabled"};
	$self->priority($data->{"priority"}) if defined $data->{"priority"};
	$self->host($data->{"host"});
	$self->remoteuser($data->{"remoteuser"}) if defined $data->{"remoteuser"};
	$self->rotation($data->{"rotation"});
	$self->destination($data->{"destination"});

	if (! ref $data->{"source"}) {
		#not a ref => not an array
		$self->sources($data->{"source"});
	} else {
		$self->sources(@{$data->{"source"}});
	}
}

##
# Accessors
##

sub id {
	my $self = shift;

	return $self->{ID};
}

sub create_time {
	my $self = shift;

	return $self->{_CREATE_TIME};
}

sub start_time {
	my $self = shift;

	return $self->{_START_TIME};
}

sub end_time {
	my $self = shift;

	return $self->{_END_TIME};
}

sub command {
	my $self = shift;

	return $self->{_COMMAND};
}

sub result {
	my $self = shift;

	return $self->{_RESULT};
}


sub enabled {
	my $self = shift;

	if (@_) { $self->{ENABLED} = shift }
	return $self->{ENABLED};
}

sub dryrun {
	my $self = shift;

	if (@_) { $self->{DRYRUN} = shift }
	return $self->{DRYRUN};
}

sub options {
	my $self = shift;

	if (@_) { $self->{OPTIONS} = shift }
	return $self->{OPTIONS};
}

sub priority {
	my $self = shift;
	if (@_) { $self->{PRIORITY} = shift }
	return $self->{PRIORITY};
}

sub host {
	my $self = shift;
	if (@_) { $self->{HOST} = shift }
	return $self->{HOST};
}

sub remoteuser {
	my $self = shift;
	if (@_) { $self->{REMOTEUSER} = shift }
	return $self->{REMOTEUSER};
}

sub rotation {
	my $self = shift;
	if (@_) { $self->{ROTATION} = shift }
	return $self->{ROTATION};
}

sub destination {
	my $self = shift;
	if (@_) { $self->{DESTINATION} = shift }
	return $self->{DESTINATION};
}

sub sources {
	my $self = shift;
	if (@_) { @{ $self->{SOURCES} } = @_ }
	return @{ $self->{SOURCES} };
}

##
# Thread starting
##

sub exec {
	my $self = shift;

	my $output;

	my $c = $self->{_COMMAND} . " 2>&1 |";

	return "Unable to start job - check shell command" unless open (CMD, $c);
	$output .= $_ while (<CMD>);
	close CMD;

	return $output;
}

sub start {
	my $self = shift;

	if (!$self->{ENABLED}) {
		print STDERR "[backp] Skipping target " . $self->{HOST} . "\n";
		return undef;
	}

	$self->{_COMMAND} = "bontmia ";
	$self->{_COMMAND}.= "--dest " . $self->{DESTINATION} . " ";
	$self->{_COMMAND}.= "--rotation " . $self->{ROTATION} . " ";
  $self->{_COMMAND}.= "--dryrun " if ($self->{DRYRUN});
  $self->{_COMMAND}.= $self->{OPTIONS} . " " if (defined $self->{OPTIONS});


	foreach my $src (@{$self->{SOURCES}}) {
		$self->{_COMMAND}.= $self->{REMOTEUSER} . "@" . $self->{HOST} . ":" . $src . " ";
	}

	print STDERR "[backp] Backuping target " . $self->{HOST} . "\n";
	print STDERR "[bontm] " . $self->{_COMMAND} . "\n";

	$self->{_START_TIME} = time;

#	$self->{_THREAD} = threads->new( sub { sleep rand 5; return ('a'..'z')[rand (26)] } );
	$self->{_THREAD} = threads->new( sub { return $self->exec(); } );

	$self->{_THREAD_ID} = $self->{_THREAD}->tid();

	return $self->{_THREAD_ID};
}

sub end {
	my $self = shift;

	if ($self->is_joinable()) {
		$self->{_END_TIME} = time;
		$self->{_RESULT} = $self->{_THREAD}->join();
		return TRUE;
	} else {
		return FALSE;
	}
}

sub tid {
	my $self = shift;

	return $self->{_THREAD_ID};
}

sub status {
	my $self = shift;

	return "DISABLED" unless ($self->{ENABLED});

	return "READY" if (! defined ($self->{_THREAD_ID}) );
	return "RUNNING" if ($self->is_running);
	return "CLOSING" if ($self->is_joinable);

	return "COMPLETED";
}

sub is_joinable {
	my $self = shift;

	if (defined $self->{_THREAD}) {
		return $self->{_THREAD}->tojoin();
	} else {
		return undef;
	}
}

sub is_running {
	my $self = shift;

	if (defined $self->{_THREAD}) {
		return $self->{_THREAD}->running();
	} else {
		return undef;
	}
}

1;


#######################################
# Package main
#######################################

package main;

#use ERASME::Backup::Job;
use Config::General;
use Getopt::Std;
use Sys::Hostname;
use POSIX qw(ceil floor);

use Mail::Sendmail;

use Data::Dumper;

use strict;

our $VERSION = "1.0";

our %CONF;
our @JOBS;
our @FINISHED;
our %OPTS;
#our @PRIOLIST;
our $CMDLINE;

$| = 1;


sub read_config {
	print STDERR "[backp] Reading config " . $OPTS{"config"} . "\n";

	if (! -r $OPTS{"config"}) {
		print "Unable to open config file " . $OPTS{"config"} . "\n";
		exit;
	}

	my $conf = new Config::General($OPTS{"config"});

	%CONF = $conf->getall;

	return 1;
}


sub create_jobs {
	my $job;

	foreach my $target (keys %CONF) {
		if (defined $OPTS{"single-target"}) {
			next unless $target eq $OPTS{"single-target"};
		}

		if (ref $CONF{$target} eq "HASH") {
			$job = ERASME::Backup::Job->new($target);
			$job->initialize($CONF{$target});
			$job->dryrun($OPTS{"dry-run"});
			$job->options($OPTS{"options"});
			push @JOBS, $job;
		} else {
			# Global option
			$OPTS{$target} = $CONF{$target};
		}
	}

}

sub sort_targets {
	@JOBS = sort { $a->priority() <=> $b->priority() } (@JOBS);

	print STDERR "[sched] Targets will be backed up in this order : ";

	foreach my $job (@JOBS) {
		print STDERR $job->host() . " ";
	}

	print "\n";
}

sub get_states {
	my %states;

	foreach my $job (@JOBS) {
		$states{$job->status()}++;
	}

	return \%states;
}

sub get_running {
	my $running = 0;

	$running = scalar &get_states->{"RUNNING"};

#	foreach my $job (@JOBS) { $running++ if $job->is_running(); }

	if ($running > 0) {
		print STDERR "[sched] $running jobs running\n";
	}

	return $running;
}

sub do_join {
		foreach my $job (@JOBS) { 
			if ($job->is_joinable()) {
				$job->end();
				push @FINISHED, $job;
			}
		}
}

sub write_status {
	my $states = &get_states;
	my $tempfile = $OPTS{'status-file'} . ".tmp";
	my $total;

	my $statestr;

	open (STATE, ">" . $OPTS{'status-file'} . ".tmp");

	print STATE "#\n# erabackup status file, generated " . scalar localtime time;
	print STATE "\n#\n# invoked with : $CMDLINE";

	foreach my $st (keys %{$states}) {
		$total += $states->{$st};
		$statestr .= $states->{$st} . " $st, "
	}

	chop $statestr;	chop $statestr;

	print STATE "\n# $total jobs ($statestr), " . floor(($states->{"COMPLETED"} + $states->{"DISABLED"}) * 1000 / $total) / 10 . "% done\n";
	print STATE "#\n# JobName, Thread, Status, Create, Started, Finished\n#\n";

	foreach my $job (@JOBS) {
		print STATE $job->id() . "," . $job->tid() . "," . $job->status() . "," . $job->create_time() . "," . $job->start_time() . "," . $job->end_time() . "\n";
	}

	close STATE;

	rename $tempfile, $OPTS{'status-file'};
}

sub run_backup {
	my @joblist=@JOBS;
	my $states;

	do {
		if (&get_running < $OPTS{"processes"}) {
			my $job = shift @joblist;
			print STDERR "[sched] starting job\n";
			$job->start();
			&write_status;
		} else {
			sleep 1;
			&do_join;
		}
	} while (scalar @joblist);

	do {
		$states = &get_states;
		&write_status;
		&do_join;
	} while ($states->{"RUNNING"} + $states->{"CLOSING"});
}

sub gen_full_report {
	my $report;

	$report .= "############################################\n";
	$report .= "######### B a c k u p  R e p o r t #########\n";
	$report .= "############################################\n";

	$report .= "\n########## Per host backup times ##########\n";

	$report .= &show_status($OPTS{"status-file"});

	$report .= "\n##########     Backup details    ##########\n";
	$report .= &gen_report();

	return $report;
}

sub gen_report {
	my $report;
	my @parts;

	foreach my $job (sort { $a->id() cmp $b->id() } @JOBS) {
		$report .= "\nJob " . $job->id() . "\n";

		$report .= '-'x(length($job->id())+5) . "\n";

		if (!$job->enabled()) {
			$report .= "\n  disabled\n";
			next;
		}

		$report .= "\n  created " . scalar localtime $job->create_time();

		$report .= "\n  thread id " . $job->tid();
		$report .= "\n  command " . $job->command();

		$report .= "\n\n  started " . scalar localtime $job->start_time();
		$report .= "\n  ended " . scalar localtime $job->end_time();

		@parts = gmtime($job->end_time() - $job->start_time());

		$report .= sprintf ("\n\n  run time : %d secs (%1dd%3dh%3dm%3ds)\n",($job->end_time() - $job->start_time()),@parts[7,2,1,0]);
		$report .= "\n  output : " . $job->result() . "\n";
	}

	$report .= "\n";

	return $report;
}

sub show_status {
	my $file = shift;

	my $result;

	my @fields;
	my @parts;

	my $lasttime = 0;

	if (!defined $file) {
		my @files = glob("/tmp/erabackup.stat.*");

		foreach my $f (@files) {
			if ((stat($f))[9] > $lasttime) {
				$lasttime = (stat($f))[9];
				$file = $f
			}
		}

		$result .= "#\n# Status file autodetected : $file\n# (last modified " . scalar localtime $lasttime;
		$result .= ")\n";
	}

	open(STAT, "<$file") or die "Error : unable to open status file $file";

	while(<STAT>) {
		if (/^#/) { $result .= $_; next; }
		@fields = split /,/;
		if (($fields[5]-$fields[4]) >= 0) {
			@parts = gmtime($fields[5]-$fields[4]);
			$result .= sprintf ("%20.20s => %3dd%3dh%3dm%3ds\n",$fields[0],@parts[7,2,1,0]);
		} else {
			@parts = gmtime(time-$fields[4]);
			$result .= sprintf ("%20.20s => %3dd%3dh%3dm%3ds (still running)\n",$fields[0],@parts[7,2,1,0]); 
		}
	}

	$result .= "\n";
}

sub help {
	print "\nerabackup version $VERSION\n\n";
	print "Usage :\n";
	print "  erabackup [-c config] [-p nthreads] [-s statusfile] [-m recipient] [-n] [-o \"options\"] [-h] [-d [statusfile]]\n\n";

	print "   -c config       : use config as configuration file (default is /etc/erabackup.conf)\n";
	print "   -p nthreads     : use nthreads number of parallel threads for backup (default is 2)\n";
	print "   -s statusfile   : use statusfile as status file during backup (default is /tmp/erabackup.stat.PID)\n";
	print "   -m recipient    : send email report to recipient when done (default is to output report to STDOUT)\n";
	print "   -e target       : execute backup only for target\n";
	print "   -n              : dry run, simulation mode.\n";
	print "   -o \"options\"    : append \"options\" to bontmia command (e.g. \"--bwlimit 250\").\n";
	print "   -d [statusfile] : displays backup progress for statusfile. If no statusfile specified, will use the most recent /tmp/erabackup.stat.*\n";
	print "   -h              : show this help\n\n";
}

sub parse_cli {
	my %opts;

	$OPTS{'config'} = "/etc/erabackup.conf";
  $OPTS{'processes'} = 2;
	$OPTS{'status-file'} = "/tmp/erabackup.stat.$$";
	$OPTS{'mail-to'} = undef;

	getopts('np:c:o:s:m:hd:e:', \%opts);

	if (defined $opts{'h'}) {
		&help;
		exit;
	}

	if (exists $opts{'d'}) {
		print &show_status($opts{'d'});
		exit;
	}

	$OPTS{"single-target"} = $opts{'e'};
  $OPTS{"config"}        = $opts{'c'} if defined $opts{'c'};
  $OPTS{"processes"}     = $opts{'p'} if defined $opts{'p'};
  $OPTS{"options"}       = $opts{'o'};
  $OPTS{"dry-run"}       = $opts{'n'};
  $OPTS{"status-file"}   = $opts{'s'} if defined $opts{'s'};
	$OPTS{"mail-to"}       = $opts{'m'} if defined $opts{'m'};
}

sub main {
	$CMDLINE = join(" ", @ARGV);

	&parse_cli;

	print STDERR "[backp] Starting backup process with " . $OPTS{"processes"} . " slots \n";

	&read_config;

	&create_jobs;

	&sort_targets;

	&run_backup;

	print STDERR "[backp] Backup done.\n\n";

	if (defined $OPTS{"mail-to"}) {
		my %mail;
		my $login = getlogin || getpwuid($<) || "root";

		%mail = ( To   => $OPTS{"mail-to"},
							From =>  $login . '@' . hostname(),
							Subject => "Backup report",
							Message => &gen_full_report );

		unshift @{$Mail::Sendmail::mailcfg{'smtp'}} , $OPTS{'smtp_server'};

		sendmail(%mail) || print "Error sending mail: $Mail::Sendmail::error\n";
	} else {
		print &gen_full_report;
	}
}


&main;


__END__

=pod

=head1 NAME

erabackup - ERASME's tool for // and easy backups

=head1 DESCRIPTION

erabackup is a wrapper for bontmia backup. erabackup will provide more
sophisticated backup control that bontmia can.

=head2 Parallelism

erabackup can start multiple bontmia backups in parallel. Using the -p
option, one can set the number of threads started. Each thread will
run a bontmia job. Once the bontmia job is done, the thread is
recycled to run another bontmia job, and so on, until there are no
jobs left to be run.

=head2 Reporting

erabackup has nice reporting capabilities. It records bontmia jobs
outputs and mail them at the end of the process. The recipient for the
mail report is set with the '-m' switch. If erabackup is invoked with
'-d' while another erabackup process is running, the status for the
current erabackup process will be displayed. If multiple erabackup
processes are running, a specific status can also be shown with the
'-d' option.

=head2 Configuration

erabackup uses Apache's style configuration files. Each target is
enclosed between opening (<target>) and closing (</target>) tags, e.g.

<www.example.org>

...

</www.example.org>

Multiple target can be configured in a single file, or each target can
be in it's own file, etc...  Between opening and closing tags, the
following keywords are recognized :


=head3 enabled

=over

Can be set to 1 or 0. If enable is set to 0, this target will be
skipped during the backup process. If enabled is not specified, the
target will of course be processed.

=back

=head3 priority

=over

Sets the job priority among all jobs defined in this file. The target
with the B<lowest> priority will be run B<first>. If two jobs have the
same priority, luck rules. The default priority is 100.

=back

=head3 rotation

=over

Rotation scheme, as defined for bontmia. Refer to the bontmia
documentation for the proper syntax and meaning.

=back

=head3 destination

=over

Where the backup will be stored. This parameters is passed without any
modification to bontmia. So the same remarks apply here : check the
bontmia documentation for proper configuration.

=back

=head3 host

=over

Which host will bontmia connect to (using ssh) for the backup.

=back

=head3 remoteuser

=over

Which user will bontmia (i.e. rsync) connect as on, the remote
host. The default is root if no value is specified.

=back

=head3 source

=over

What source directories have to be backed up. The souce keywork can
appear multiple times.

=back

=head2 Configuration Syntax

The values for the keywords can be specified in two ways :

=over

option = value

=back

or

=over

option value

=back

Lines starting with '#' will be ignored.

=head2 Command Line Options

erabackup supports a bunch of command line switches.

=over

=item -c <config>

Use <config> as configuration file (default is /etc/erabackup.conf).

=item -p <nthreads>

Use <nthreads> number of parallel threads for backup (default is 2).

=item -s <statusfile>

Use <statusfile> as status file during backup (default is
/tmp/erabackup.stat.PID) where PID is the PID of the erabackup
process.

=item -m <recipient>

Send email report to <recipient> when done (default is to output
report to STDOUT).

=item -e <target>

Execute backup only for <target>. All other targets are skipped, event
if they have "enabled=1" in their configuration. If <target> has
"enabled=0" in it's configuration, it will be skipped.

=item -n

Dry run. Rsync will skip file transfers, and bontmia will simulate a
backup.

=item -o <"options">

Append "options" to bontmia command (e.g. "--bwlimit 250").
Enclosee options in '"'.

=item -d [statusfile]

Displays backup progress for statusfile. If no statusfile specified,
will use the most recent file among /tmp/erabackup.stat.*

=item -h

Displays command line.

=back

=head2 Configuration File Example

Configuration file example for 3 targets (www, ftp, mail).  ftp won't
be backed up since it has "enabled=0" in it's configuration.  mail
will be backed up first (priority = 90), and then www (priority=100).

=over

<mail>

	# backup for mail.example.org (approx: 18 Go)
	enabled=1
	priority=90
	destination=/var/backup/mail.example.org
	rotation=0minutes4hours7days4weeks3month0years

	host=mail.example.org
	remoteuser=root

	source	/etc
	source	/usr/local/bin
	source	/var/lib/cyrus
	source	/var/lib/mysql
	source	/var/spool
</mail>

<www>

	# backup for www.example.org (aprox: 300 Mo)
	enabled=1
	priority=100
	destination=/var/backup/www.example.org
	rotation=0minutes0hours7days4weeks6month0years

	host=www.example.org
	remoteuser=root

	source /etc
	source /usr/local/bin
	source /var/www
</www>

<ftp>

	# backup for ftp.example.org (aprox: 300 Go)
	enabled=0
	priority=120
	destination=/var/backup/ftp.example.org
	rotation=0minutes0hours0days4weeks6month0years

	host=ftp.example.org

	source /etc
	source /var/ftp
</ftp>

=back

=head2 Invocation Scenarios

=head3 erabackup -p1 -c /etc/bontmia/servers.config -m webmaster@example.com -e www

Will backup target 'www' only. This target is defined somewhere in
"/etc/bontmia/servers.config". A backup report will be mailed to
"webmaster@example.com". Only one thread will be started for this backup.
This scenario assume the above configuration file is used.

=head3 erabackup -p8 -c /etc/bontmia/manyservers.config -m noc@example.org -o "--bwlimit 250"

Will backup all enabled targets defined in
"/etc/bontmia/manyservers.config". Eight threads will be used for this (so
eight backups will take place in parallel), and each backup will be
limited in bandwidth to 250KBps (2Mbps). A report will be mailed to
"noc@example.org" at the end of the process.

This command is fine to make the initial full backup without hogging
the clients or the backup server (but it can take days, literally,
depending on the volume to be backuped, just do the maths).

=head3 erabackup -p8 -c /etc/bontmia/manyservers.config -m noc@example.org -n

Same as the above, but running in simulation mode.

=head3 erabackup -d

Displays the most recent generated status data.

=head3 erabackup -d /tmp/erabackup.stat.13412

Displays status data generated by process 13412, and stored in file
/tmp/erabackup.stat.13412

=head1 CAVEATS

Status files are never cleaned up by erabackup. This is the sysadmin's
job to do so, or some tmp cleaner.



=cut
